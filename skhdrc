# ############################################################### #
# YABAI
# ############################################################### #

# ####################### #
# Focus
# ####################### #
meh - k		    : yabai -m window --focus south
meh - j		    : yabai -m window --focus west
meh - l		    : yabai -m window --focus east
meh - i		    : yabai -m window --focus north

# Focus next
meh - left	    : yabai -m window --focus prev
meh - right	    : yabai -m window --focus next

# Focus first, in case we lose focus (e.g. minimizing)
meh - return    : yabai -m window --focus first

# Fullscreen
meh - f         : yabai -m window --toggle zoom-fullscreen


# Focus on next display
# 29 == ;
# meh - space	: $HOME/bin/cycle_display.sh


# ####################### #
# Swap and Warp
# ####################### #
hyper - k	: yabai -m window --swap south
hyper - j	: yabai -m window --swap west
hyper - l	: yabai -m window --swap east
hyper - i	: yabai -m window --swap north

hyper - d	: yabai -m window --warp south
hyper - s	: yabai -m window --warp west
hyper - f	: yabai -m window --warp east
hyper - e	: yabai -m window --warp north

# Move to next display
# hyper - space : yabai -m window --display recent && yabai -m display --focus recent

# ####################### #
# Spaces
# ####################### #

#Note: I'm using MacOS System Settings bindings to focus on a space... Ctrl - N, or Ctrl - left/right
#Moving a window to another space is done with ctrl + cmd - n/left/right
#These are for moving windows only
ctrl + cmd - 1      : yabai -m window --space 1  --focus
ctrl + cmd - 2      : yabai -m window --space 2  --focus
ctrl + cmd - 3      : yabai -m window --space 3  --focus
ctrl + cmd - 4      : yabai -m window --space 4  --focus
ctrl + cmd - 5      : yabai -m window --space 5  --focus
ctrl + cmd - 6      : yabai -m window --space 6  --focus
ctrl + cmd - 7      : yabai -m window --space 7  --focus
ctrl + cmd - 8      : yabai -m window --space 8  --focus
ctrl + cmd - 9      : yabai -m window --space 9  --focus
ctrl + cmd - 0      : yabai -m window --space 10 --focus

ctrl + cmd - left   : yabai -m window --space prev --focus
ctrl + cmd - right  : yabai -m window --space next --focus


# ####################### #
# Manage Splits and Sizes
# ####################### #

# toggle window split type
# 0x27 == '
hyper - 0x27   	: yabai -m window --toggle split

# Make window bigger
# 0x18 == =
hyper - 0x18    : yabai -m window --resize left:-50:0 --resize right:50:0 --resize bottom:0:50 --resize top:0:-50

# Make window smaller
# 0x1B == -
hyper - 0x1B    : yabai -m window --resize left:50:0 --resize right:-50:0 --resize bottom:0:-50 --resize top:0:50


# ####################### #
# Resets
# ####################### #

# balance size of windows
hyper - return : yabai -m space --balance

# restart yabai
meh - escape : yabai --restart-service


# ############################################################### #
# YABAI Unused
# ############################################################### #

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

######################
# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + alt + ctrl - 1 : yabai -m window --space  1; yabai -m space --focus 1
# shift + alt + ctrl - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
#shift + alt + ctrl - 1: yabai -m window --display 1 ; yabai -m display --focus 1 ; #yabai -m window --focus first
#shift + alt + ctrl - 2: yabai -m window --display 2 ; yabai -m display --focus 2 ; #yabai -m window --focus first
#shift + alt + ctrl - 3: yabai -m window --display 3 ; yabai -m display --focus 3 ; #yabai -m window --focus first

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - = : yabai -m window --resize left:-20:0 --resize right:20:0 --resize bottom:0:20 --resize top:0:-20

#shift + alt + ctrl - j : yabai -m window --resize left:-20:0
#shift + alt + ctrl - l : yabai -m window --resize right:20:0
#shift + alt + ctrl - k : yabai -m window --resize bottom:0:20
#shift + alt + ctrl - i : yabai -m window --resize top:0:-20

# decrease window size
#shift + alt + ctrl + esc - j : yabai -m window --resize left:20:0
#shift + alt + ctrl + esc - l : yabai -m window --resize right:-20:0
#shift + alt + ctrl + esc - k : yabai -m window --resize bottom:0:-20
#shift + alt + ctrl + esc - i : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - return : yabai -m window --toggle float --grid 4:4:1:1:2:2

# float / unfloat window and full screen it
# shift + alt - return : yabai -m window --toggle float --grid 1:1:0:0:1:1

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip


# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt -    : yabai -m window --grid 1:2:0:0:1:1

# ################################################################
# Quick Open Apps
# ################################################################

#meh - a			: open "/Applications/Arc.app"
#shift + alt - o		: open "/Applications/Obsidian.app"
#shift + alt - f		: open "/Applications/Omnifocus.app"
#shift + alt - v		: open "/Applications/Vitamin-r 4.app"




# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.


