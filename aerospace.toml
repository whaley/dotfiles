# Place a copy of this config to ~/.aerospace.toml
# After that, you can edit ~/.aerospace.toml to your liking

# You can use it to add commands that run after login to macOS user session.
# 'start-at-login' needs to be 'true' for 'after-login-command' to work
# Available commands: https://nikitabobko.github.io/AeroSpace/commands
after-login-command = []

# You can use it to add commands that run after AeroSpace startup.
# 'after-startup-command' is run after 'after-login-command'
# Available commands : https://nikitabobko.github.io/AeroSpace/commands
after-startup-command = [
	'exec-and-forget /Users/whaley/homebrew/bin/borders active_color=0xffe149a7 inactive_color=0xff494d64 width=5.0'
]

# Start AeroSpace at login
start-at-login = false

# Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable-normalization-flatten-containers = true
enable-normalization-opposite-orientation-for-nested-containers = true

# See: https://nikitabobko.github.io/AeroSpace/guide#layouts
# The 'accordion-padding' specifies the size of accordion padding
# You can set 0 to disable the padding feature
accordion-padding = 50

# Possible values: tiles|accordion
default-root-container-layout = 'tiles'

# Possible values: horizontal|vertical|auto
# 'auto' means: wide monitor (anything wider than high) gets horizontal orientation,
#               tall monitor (anything higher than wide) gets vertical orientation
default-root-container-orientation = 'auto'

# Mouse follows focus when focused monitor changes
# Drop it from your config, if you don't like this behavior
# See https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks
# See https://nikitabobko.github.io/AeroSpace/commands#move-mouse
# Fallback value (if you omit the key): on-focused-monitor-changed = []
on-focused-monitor-changed = ['move-mouse monitor-lazy-center']

# You can effectively turn off macOS "Hide application" (cmd-h) feature by toggling this flag
# Useful if you don't use this macOS feature, but accidentally hit cmd-h or cmd-alt-h key
# Also see: https://nikitabobko.github.io/AeroSpace/goodness#disable-hide-app
# automatically-unhide-macos-hidden-apps = false

# Possible values: (qwerty|dvorak)
# See https://nikitabobko.github.io/AeroSpace/guide#key-mapping
[key-mapping]
preset = 'qwerty'

# [key-mapping.key-notation-to-key-code]
# meh = 'ctr-alt-shift'
# hyper = 'ctrl-alt-shift-cmd'

# Gaps between windows (inner-*) and between monitor edges (outer-*).
# Possible values:
# - Constant:     gaps.outer.top = 8
# - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
#                 In this example, 24 is a default value when there is no match.
#                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
#                 See: https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
[gaps]
inner.horizontal = 5
inner.vertical =   5
outer.left =       5
outer.bottom =     5
outer.top =        5
outer.right =      5

# 'main' binding mode declaration
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
# 'main' binding mode must be always presented
# Fallback value (if you omit the key): mode.main.binding = {}
[mode.main.binding]

# All possible keys
# - Letters.        a, b, c, ..., z
# - Numbers.        0, 1, 2, ..., 9
# - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
# - F-keys.         f1, f2, ..., f20
# - Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon, backtick,
#                   leftSquareBracket, rightSquareBracket, space, enter, esc, backspace, tab
# - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
#                   keypadMinus, keypadMultiply, keypadPlus
# - Arrows.         left, down, up, right

# All possible modifiers: cmd, alt, ctrl, shift

# All possible commands: https://nikitabobko.github.io/AeroSpace/commands

# See: https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget
# You can uncomment the following lines to open up terminal with alt + enter shortcut (like in i3)
# alt-enter = '''exec-and-forget osascript -e '
# tell application "Terminal"
#     do script
#     activate
# end tell'
# '''

# See: https://nikitabobko.github.io/AeroSpace/commands#layout
ctrl-alt-shift-slash = 'layout tiles horizontal vertical'
ctrl-alt-shift-comma = 'layout accordion horizontal vertical'

ctrl-alt-shift-f     = 'layout floating tiling'  #toggle float/ for a window

# See: https://nikitabobko.github.io/AeroSpace/commands#balance-sizes
ctrl-alt-shift-esc = 'balance-sizes'

# See: https://nikitabobko.github.io/AeroSpace/commands#focus
ctrl-alt-shift-j = 'focus left'
ctrl-alt-shift-k = 'focus down'
ctrl-alt-shift-i = 'focus up'
ctrl-alt-shift-l = 'focus right'

# See: https://nikitabobko.github.io/AeroSpace/commands#move
cmd-ctrl-alt-shift-j = 'move left'
cmd-ctrl-alt-shift-k = 'move down'
cmd-ctrl-alt-shift-i = 'move up'
cmd-ctrl-alt-shift-l = 'move right'

# See: https://nikitabobko.github.io/AeroSpace/commands#resize
ctrl-alt-shift-cmd-minus = 'resize smart -100'
ctrl-alt-shift-cmd-equal = 'resize smart +100'

# See: https://nikitabobko.github.io/AeroSpace/commands#workspace
ctrl-alt-shift-enter    = 'workspace Home'
ctrl-alt-shift-a        = 'workspace A'
ctrl-alt-shift-b        = 'workspace B'
ctrl-alt-shift-c        = 'workspace C'
ctrl-alt-shift-d        = 'workspace Dev'
ctrl-alt-shift-m        = 'workspace Music'

ctrl-alt-shift-left     = 'workspace --wrap-around prev'
ctrl-alt-shift-right    = 'workspace --wrap-around next'

# See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
ctrl-alt-shift-tab      = 'workspace-back-and-forth'


# See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
ctrl-alt-shift-cmd-enter    = 'move-node-to-workspace Home'
ctrl-alt-shift-cmd-a        = 'move-node-to-workspace A'
ctrl-alt-shift-cmd-b        = 'move-node-to-workspace B'
ctrl-alt-shift-cmd-c        = 'move-node-to-workspace C'
ctrl-alt-shift-cmd-d        = 'move-node-to-workspace Dev'
ctrl-alt-shift-cmd-m        = 'move-node-to-workspace Music'

ctrl-alt-shift-cmd-left     = 'move-node-to-workspace --focus-follows-window --wrap-around prev'
ctrl-alt-shift-cmd-right    = 'move-node-to-workspace --focus-follows-window --wrap-around next'


# See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor
# alt-shift-tab = 'move-workspace-to-monitor --wrap-around next'

# See: https://nikitabobko.github.io/AeroSpace/commands#mode
ctrl-alt-shift-semicolon = 'mode service'
ctrl-alt-shift-o = 'mode open'

# 'service' binding mode declaration.
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
[mode.service.binding]
esc = ['reload-config', 'mode main']
r = ['flatten-workspace-tree', 'mode main'] # reset layout
f = ['fullscreen', 'mode main'] # Toggle between floating and tiling layout
backspace = ['close-all-windows-but-current', 'mode main']

j = ['join-with left', 'mode main']
k = ['join-with down', 'mode main']
i = ['join-with up', 'mode main']
l = ['join-with right', 'mode main']

[mode.open.binding]
esc = 'mode main'

# Chrome if it's available (e.g. work machine) or Chromium
c = ['''exec-and-forget osascript -e '
try
	tell application "Finder" to get application file id "com.google.Chrome"
	set chrome to "Chrome"
on error
	set chrome to "Chromium"
end try

tell application chrome
	make new window
	activate
end tell
'
''', 'mode main']

# Open iTerm if needed, or create new window
t =  ['''exec-and-forget osascript -e '
if application "iTerm" is running then
	tell application "iTerm"
		set newWindow to (create window with default profile)
	end tell
else
	tell application "iTerm"
		activate
	end tell
end if
'
''', 'mode main']

# Open Obsidian
#   use an external  script here since Obsidian doesn't
#   1) support applescript since it's Electron :(
#   2) kind of only works within a single window anyway
o = ['exec-and-forget /Users/whaley/bin/aerospace_move_obsidian_to_current_workspace.py', 'mode main']
