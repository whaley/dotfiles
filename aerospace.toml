# Place a copy of this config to ~/.aerospace.toml
# After that, you can edit ~/.aerospace.toml to your liking

# You can use it to add commands that run after login to macOS user session.
# 'start-at-login' needs to be 'true' for 'after-login-command' to work
# Available commands: https://nikitabobko.github.io/AeroSpace/commands
after-login-command = []

# You can use it to add commands that run after AeroSpace startup.
# 'after-startup-command' is run after 'after-login-command'
# Available commands : https://nikitabobko.github.io/AeroSpace/commands
after-startup-command = [
    'exec-and-forget /Users/whaley/homebrew/bin/borders active_color=0xffffffff width=20.0'
]

# Start AeroSpace at login
start-at-login = true

# Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable-normalization-flatten-containers                         = true
enable-normalization-opposite-orientation-for-nested-containers = true

# See: https://nikitabobko.github.io/AeroSpace/guide#layouts
# The 'accordion-padding' specifies the size of accordion padding
# You can set 0 to disable the padding feature
accordion-padding = 100

# Possible values: tiles|accordion
default-root-container-layout = 'tiles'

# Possible values: horizontal|vertical|auto
# 'auto' means: wide monitor (anything wider than high) gets horizontal orientation,
#               tall monitor (anything higher than wide) gets vertical orientation
default-root-container-orientation = 'auto'

# Mouse follows focus when focused monitor changes
# Drop it from your config, if you don't like this behavior
# See https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks
# See https://nikitabobko.github.io/AeroSpace/commands#move-mouse
# Fallback value (if you omit the key): on-focused-monitor-changed = []
on-focused-monitor-changed = ['move-mouse monitor-lazy-center']
on-focus-changed = ['move-mouse window-lazy-center']

# You can effectively turn off macOS "Hide application" (cmd-h) feature by toggling this flag
# Useful if you don't use this macOS feature, but accidentally hit cmd-h or cmd-alt-h key
# Also see: https://nikitabobko.github.io/AeroSpace/goodness#disable-hide-app
automatically-unhide-macos-hidden-apps = true

# Possible values: (qwerty|dvorak)
# See https://nikitabobko.github.io/AeroSpace/guide#key-mapping
[key-mapping]
preset = 'qwerty'

# [key-mapping.key-notation-to-key-code]
# meh = 'ctr-alt-shift'
# hyper = 'ctrl-alt-shift-cmd'

# Gaps between windows (inner-*) and between monitor edges (outer-*).
# Possible values:
# - Constant:     gaps.outer.top = 8
# - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
#                 In this example, 24 is a default value when there is no match.
#                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
#                 See: https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
[gaps]
inner.horizontal    = 20
inner.vertical      = 20
outer.left          = 20
outer.bottom        = 20
outer.top           = 20
outer.right         = 20

# 'main' binding mode declaration
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
# 'main' binding mode must be always presented
# Fallback value (if you omit the key): mode.main.binding = {}
[mode.main.binding]

# All possible keys
# - Letters.        a, b, c, ..., z
# - Numbers.        0, 1, 2, ..., 9
# - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
# - F-keys.         f1, f2, ..., f20
# - Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon, backtick,
#                   leftSquareBracket, rightSquareBracket, space, enter, esc, backspace, tab
# - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
#                   keypadMinus, keypadMultiply, keypadPlus
# - Arrows.         left, down, up, right

# All possible modifiers: cmd, alt, ctrl, shift

# All possible commands: https://nikitabobko.github.io/AeroSpace/commands

# See: https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget
# You can uncomment the following lines to open up terminal with alt + enter shortcut (like in i3)
# alt-enter = '''exec-and-forget osascript -e '
# tell application "Terminal"
#     do script
#     activate
# end tell'
# '''

# See: https://nikitabobko.github.io/AeroSpace/commands#layout
ctrl-alt-shift-comma        = 'layout accordion horizontal vertical'
ctrl-alt-shift-slash        = 'layout tiles horizontal vertical'
cmd-ctrl-alt-shift-f        = 'layout floating tiling' #toggle float for a window
ctrl-alt-shift-f            = 'fullscreen' #toggle fullscreen for a window
cmd-ctrl-alt-shift-r        = 'flatten-workspace-tree' #reset layout

# See: https://nikitabobko.github.io/AeroSpace/commands#balance-sizes
ctrl-alt-shift-esc          = 'balance-sizes'

# See: https://nikitabobko.github.io/AeroSpace/commands#focus
ctrl-alt-shift-j            = 'focus left   --boundaries-action wrap-around-the-workspace --ignore-floating'
ctrl-alt-shift-k            = 'focus down   --boundaries-action wrap-around-the-workspace --ignore-floating'
ctrl-alt-shift-i            = 'focus up     --boundaries-action wrap-around-the-workspace --ignore-floating'
ctrl-alt-shift-l            = 'focus right  --boundaries-action wrap-around-the-workspace --ignore-floating'

# See: https://nikitabobko.github.io/AeroSpace/commands#move
cmd-ctrl-alt-shift-j        = 'move left'
cmd-ctrl-alt-shift-k        = 'move down'
cmd-ctrl-alt-shift-i        = 'move up'
cmd-ctrl-alt-shift-l        = 'move right'

cmd-ctrl-alt-shift-left     = 'join-with left'
cmd-ctrl-alt-shift-right    = 'join-with right'
cmd-ctrl-alt-shift-down     = 'join-with down'
cmd-ctrl-alt-shift-up       = 'join-with up'

# See: https://nikitabobko.github.io/AeroSpace/commands#resize
ctrl-alt-shift-minus        = 'resize smart          -100'
ctrl-alt-shift-equal        = 'resize smart          +100'
ctrl-alt-shift-cmd-minus    = 'resize smart-opposite -100'
ctrl-alt-shift-cmd-equal    = 'resize smart-opposite +100'

# Move between workspaces in order, see [mode.workspaces.binding] for shortcuts
# See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
ctrl-alt-shift-tab          = 'workspace-back-and-forth'
ctrl-alt-shift-left         = 'workspace --wrap-around prev'
ctrl-alt-shift-right        = 'workspace --wrap-around next'

ctrl-alt-shift-cmd-w        = 'close-all-windows-but-current'

# Minimize without losing aerospace focus
cmd-m                       = 'macos-native-minimize'




###############################################################################
# Modes
###############################################################################
# See: https://nikitabobko.github.io/AeroSpace/commands#mode
ctrl-alt-shift-w            = 'mode workspaces'
ctrl-alt-shift-o            = 'mode open'

#######################################
# Workpaces
#######################################
[mode.workspaces.binding]

# See: https://nikitabobko.github.io/AeroSpace/commands#workspace
# See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
esc                         = 'mode main'

# Workspaces
a                           = 'workspace A'
ctrl-alt-shift-a            = 'move-node-to-workspace A'
cmd-ctrl-alt-shift-a        = 'move-node-to-workspace A --focus-follows-window'

b                           = 'workspace B'
ctrl-alt-shift-b            = 'move-node-to-workspace B'
cmd-ctrl-alt-shift-b        = 'move-node-to-workspace B --focus-follows-window'

c                           = 'workspace C'
ctrl-alt-shift-c            = 'move-node-to-workspace C'
cmd-ctrl-alt-shift-c        = 'move-node-to-workspace C --focus-follows-window'

d                           = 'workspace D'
ctrl-alt-shift-d            = 'move-node-to-workspace D'
cmd-ctrl-alt-shift-d        = 'move-node-to-workspace D --focus-follows-window'

e                           = 'workspace E'
ctrl-alt-shift-e            = 'move-node-to-workspace E'
cmd-ctrl-alt-shift-e        = 'move-node-to-workspace E --focus-follows-window'


# Move between workspaces
ctrl-alt-shift-tab          = 'workspace-back-and-forth'

ctrl-alt-shift-left         = 'workspace --wrap-around prev'
ctrl-alt-shift-right        = 'workspace --wrap-around next'

cmd-ctrl-alt-shift-right    = 'move-node-to-workspace --wrap-around --focus-follows-window next'
cmd-ctrl-alt-shift-left     = 'move-node-to-workspace --wrap-around --focus-follows-window prev'

# Keep these here for moving focus between windows for organizing workspace without leaving mode
ctrl-alt-shift-j            = 'focus left  --boundaries-action wrap-around-the-workspace --ignore-floating'
ctrl-alt-shift-k            = 'focus down  --boundaries-action wrap-around-the-workspace --ignore-floating'
ctrl-alt-shift-i            = 'focus up    --boundaries-action wrap-around-the-workspace --ignore-floating'
ctrl-alt-shift-l            = 'focus right --boundaries-action wrap-around-the-workspace --ignore-floating'



#######################################
# Open Apps and Windows
#######################################
[mode.open.binding]
esc                         = 'mode main'

# Arc
a = ['''exec-and-forget osascript -e '
tell application "Arc"
	make new window
	activate
end tell
'
''', 'mode main']

#  Chrome if it's available (e.g. work machine) or Chromium (e.g. personal machine)
c = ['''exec-and-forget osascript -e '
try
    tell application "Chrome"
        make new window
        activate
    end tell
on error
    tell application "Chromium"
        make new window
        activate
    end tell
end try
'
''', 'mode main']

# Open iTerm if needed, or create new window
t =  ['''exec-and-forget osascript -e '
if application "iTerm" is running then
    tell application "iTerm"
        set newWindow to (create window with default profile)
    end tell
else
    tell application "iTerm"
        activate
    end tell
end if
'
''', 'mode main']

# Open Omnifocus in a new window
# Bit of a hack with keyboard shortcuts since 'make new document window' creates a new tab
f = ['''exec-and-forget osascript -e '
tell application "OmniFocus"
    activate
    tell application "System Events"
        tell process "OmniFocus"
            keystroke "n" using {option down, command down}
        end tell
    end tell
end tell
'
''', 'mode main']


# Apps with only a single window or can't otherwise support applescript
# Obsidian
o = ['exec-and-forget /Users/whaley/bin/aerospace_move_obsidian_to_current_workspace.py', 'mode main']
# Workplace PWA
w = ['exec-and-forget /Users/whaley/bin/aerospace_move_workchat_to_current_workspace.py', 'mode main']


###############################################################################
# on-window-detected callbacks
###############################################################################

#Move Zoom and focus to the video workspace
# [[on-window-detected]]
#     if.app-id = 'us.zoom.xos'
#     check-further-callbacks = true
#     run = ['move-node-to-workspace V --focus-follows-window']

# Float By Default
[[on-window-detected]]
    if.app-id = 'net.publicspace.dist.vitaminr4'
    check-further-callbacks = true
    run = 'layout floating'
[[on-window-detected]]
    if.app-id = 'com.apple.Music'
    check-further-callbacks = true
    run = ['layout floating']
[[on-window-detected]]
    if.app-id = 'com.electron.brain.fm'
    check-further-callbacks = true
    run = ['layout floating']
[[on-window-detected]]
    if.app-name-regex-substring = 'di.fm'
    check-further-callbacks = true
    run = ['layout floating']
[[on-window-detected]]
    if.app-id = 'com.1password.1password'
    check-further-callbacks = true
    run = ['layout floating']
[[on-window-detected]]
    if.app-id = 'com.apple.Maps'
    check-further-callbacks = true
    run = ['layout floating']
[[on-window-detected]]
    if.app-id = 'com.apple.MobileSMS'
    check-further-callbacks = true
    run = 'layout floating'
[[on-window-detected]]
    if.app-id = 'com.apple.iCal'
    check-further-callbacks = true
    run = ['layout floating']
[[on-window-detected]]
    if.app-id = 'com.apple.finder'
    check-further-callbacks = true
    run = ['layout floating']
[[on-window-detected]]
    if.app-id = 'com.dejal.timeout'
    check-further-callbacks = true
    run = ['layout floating']
[[on-window-detected]]
    if.app-id = 'com.cisco.secureclient.gui'
    check-further-callbacks = true
    run = ['layout floating']
[[on-window-detected]]
    if.app-name-regex-substring = 'Google Voice'
    check-further-callbacks = true
    run = 'layout floating'
# [[on-window-detected]]
#     if.app-id = 'com.apple.mail'
#     # Don't float the main window, just message windows
#     # Main window title always contains  "N messages" do negative lookahead for this"
#     if.window-title-regex-substring = '^(?!.*\d+\smessages).*$'
#     check-further-callbacks = true
#     run = ['layout floating']

# Fix Orion
[[on-window-detected]]
    if.app-id = 'com.kagi.kagimacOS'
    run = [] # Empty run block with no callbacks seems to work with phantom windows
